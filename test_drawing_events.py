#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–æ–¥—ñ–π –º–∞–ª—é–≤–∞–Ω–Ω—è
"""
import asyncio
import json
import uuid
import websockets
import aiohttp
from datetime import datetime
import sys
import random

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
SERVER_URL = "http://localhost:8000"
WS_URL = "ws://localhost:8000"
ROOM_ID = "test-room"

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
COLORS = ["#FF0000", "#00FF00", "#0000FF", "#FF00FF", "#FFFF00", "#00FFFF"]

# –ü–ª–∞—Ç—Ñ–æ—Ä–º–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
PLATFORMS = ["android", "windows"]

async def test_rest_api():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è REST API –¥–ª—è –ø–æ–¥—ñ–π –º–∞–ª—é–≤–∞–Ω–Ω—è"""
    print(f"üì° –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è REST API –¥–ª—è –ø–æ–¥—ñ–π –º–∞–ª—é–≤–∞–Ω–Ω—è –≤ –∫—ñ–º–Ω–∞—Ç—ñ {ROOM_ID}")
    
    async with aiohttp.ClientSession() as session:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ–∫—ñ–ª—å–∫–∞ –ø–æ–¥—ñ–π
        for i in range(3):
            event_id = f"test-event-{uuid.uuid4().hex[:8]}"
            event_data = {
                "event_id": event_id,
                "event_name": f"–¢–µ—Å—Ç–æ–≤–∞ –ø–æ–¥—ñ—è {i+1}",
                "drawing_type": "polygon",
                "action": "add_point",
                "platform": random.choice(PLATFORMS),
                "timestamp": datetime.now().isoformat(),
                "style": {
                    "color": random.choice(COLORS),
                    "width": random.uniform(1.0, 5.0),
                    "fill": random.choice([True, False]),
                    "opacity": random.uniform(0.3, 1.0)
                },
                "data": {
                    "lat": random.uniform(48.0, 49.0),
                    "lon": random.uniform(30.0, 31.0)
                }
            }
            
            print(f"üì§ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó {event_id}...")
            async with session.post(
                f"{SERVER_URL}/api/events/{ROOM_ID}",
                json=event_data
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    print(f"‚úÖ –ü–æ–¥—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: {result}")
                else:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó: {response.status}")
                    text = await response.text()
                    print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å: {text}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ–¥—ñ—ó
        print(f"\nüì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–¥—ñ–π –¥–ª—è –∫—ñ–º–Ω–∞—Ç–∏ {ROOM_ID}...")
        async with session.get(f"{SERVER_URL}/api/events/{ROOM_ID}") as response:
            if response.status == 200:
                result = await response.json()
                print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(result['events'])} –ø–æ–¥—ñ–π:")
                for event in result["events"]:
                    print(f"   - {event['event_id']}: {event.get('event_name')} ({event['drawing_type']})")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–¥—ñ–π: {response.status}")
        
        # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ø–æ–¥—ñ—é
        if len(result["events"]) > 0:
            event_id = result["events"][0]["event_id"]
            print(f"\nüì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–¥—ñ—ó {event_id}...")
            async with session.get(f"{SERVER_URL}/api/events/{ROOM_ID}/{event_id}") as response:
                if response.status == 200:
                    event = await response.json()
                    print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–¥—ñ—é {event_id}:")
                    print(f"   –ù–∞–∑–≤–∞: {event.get('event_name')}")
                    print(f"   –¢–∏–ø: {event['drawing_type']}")
                    print(f"   –î—ñ—è: {event['action']}")
                    print(f"   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {event['platform']}")
                else:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–¥—ñ—ó: {response.status}")
        
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–¥—ñ—ó
        if len(result["events"]) > 1:
            event_id = result["events"][1]["event_id"]
            print(f"\nüóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–¥—ñ—ó {event_id}...")
            async with session.delete(f"{SERVER_URL}/api/events/{ROOM_ID}/{event_id}") as response:
                if response.status == 200:
                    result = await response.json()
                    print(f"‚úÖ –ü–æ–¥—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ: {result}")
                else:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–¥—ñ—ó: {response.status}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        print(f"\nüì• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø–∏—Å–∫—É –ø–æ–¥—ñ–π –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è...")
        async with session.get(f"{SERVER_URL}/api/events/{ROOM_ID}") as response:
            if response.status == 200:
                result = await response.json()
                print(f"‚úÖ –ó–∞–ª–∏—à–∏–ª–æ—Å—å {len(result['events'])} –ø–æ–¥—ñ–π")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–¥—ñ–π: {response.status}")

async def test_websocket():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è WebSocket –¥–ª—è –ø–æ–¥—ñ–π –º–∞–ª—é–≤–∞–Ω–Ω—è"""
    print(f"\nüì° –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è WebSocket –¥–ª—è –ø–æ–¥—ñ–π –º–∞–ª—é–≤–∞–Ω–Ω—è –≤ –∫—ñ–º–Ω–∞—Ç—ñ {ROOM_ID}")
    
    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—å –¥–æ WebSocket
    print(f"üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebSocket...")
    try:
        async with websockets.connect(f"{WS_URL}/ws/{ROOM_ID}") as websocket:
            print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ WebSocket")
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            await websocket.send(json.dumps({
                "type": "join",
                "platform": "test_client",
                "version": "1.0.0"
            }))
            
            # –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            response = await websocket.recv()
            print(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ: {response}")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–¥—ñ—é —á–µ—Ä–µ–∑ WebSocket
            event_id = f"ws-event-{uuid.uuid4().hex[:8]}"
            print(f"\nüì§ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–¥—ñ—ó {event_id} —á–µ—Ä–µ–∑ WebSocket...")
            await websocket.send(json.dumps({
                "type": "drawing_event",
                "event_id": event_id,
                "event_name": "–ü–æ–¥—ñ—è —á–µ—Ä–µ–∑ WebSocket",
                "drawing_type": "marker",
                "action": "add",
                "platform": "test_client",
                "data": {
                    "lat": 48.5,
                    "lon": 30.5
                },
                "style": {
                    "color": "#FF0000",
                    "width": 3.0,
                    "fill": True,
                    "opacity": 0.7
                }
            }))
            
            # –û—á—ñ–∫—É—î–º–æ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...")
            for _ in range(3):  # –û—á—ñ–∫—É—î–º–æ –∫—ñ–ª—å–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=2.0)
                    print(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ: {response}")
                except asyncio.TimeoutError:
                    break
            
            print("‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è WebSocket –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ WebSocket: {e}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è –ø–æ–¥—ñ–π –º–∞–ª—é–≤–∞–Ω–Ω—è")
    
    try:
        # –¢–µ—Å—Ç—É—î–º–æ REST API
        await test_rest_api()
        
        # –¢–µ—Å—Ç—É—î–º–æ WebSocket
        await test_websocket()
        
        print("\n‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(asyncio.run(main()))
