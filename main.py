from fastapi import FastAPI, WebSocket, WebSocketDisconnect, File, UploadFile, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import json
import asyncio
from typing import Dict, List, Set
from datetime import datetime
import os

from websocket_handler import ConnectionManager
from database import Database, init_db
from api.updates import router as updates_router
from api.rooms import router as rooms_router
from models.drawing import DrawingCommand, Room

app = FastAPI(title="Drawing Sync Server", version="1.0.0")

# CORS middleware –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
os.makedirs("static/updates", exist_ok=True)
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
manager = ConnectionManager()
db = Database()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(updates_router, prefix="/api/updates", tags=["updates"])
app.include_router(rooms_router, prefix="/api/rooms", tags=["rooms"])

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è API –∫–æ–º–Ω–∞—Ç
from api.rooms import set_connection_manager

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    await init_db()
    set_connection_manager(manager)
    print("üöÄ Drawing Sync Server –∑–∞–ø—É—â–µ–Ω!")

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "Drawing Sync Server",
        "version": "1.0.0",
        "endpoints": {
            "websocket": "/ws/{room_id}",
            "updates": "/api/updates/",
            "rooms": "/api/rooms/"
        }
    }

@app.get("/api/status")
async def get_status():
    """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "online",
        "connected_clients": len(manager.active_connections),
        "active_rooms": len(manager.rooms),
        "timestamp": datetime.now().isoformat()
    }

@app.websocket("/ws/{room_id}")
async def websocket_endpoint(websocket: WebSocket, room_id: str):
    """WebSocket endpoint –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è"""
    await manager.connect(websocket, room_id)
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            message = json.loads(data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Ä–∏—Å–æ–≤–∞–Ω–∏—è
            if message.get("type") == "drawing" or message.get("type") == "drawing_event":
                data = message.get("data", {}) if message.get("type") == "drawing_event" else message
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                is_geographical = data.get("is_geographical", False)
                lat = data.get("lat")
                lon = data.get("lon")
                x = data.get("x", 0)
                y = data.get("y", 0)
                
                # –ï—Å–ª–∏ lat/lon –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–æ x/y –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                if (lat is None or lon is None) and (-90 <= x <= 90) and (-180 <= y <= 180):
                    print(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º x,y –≤ lat,lon: x={x}, y={y}")
                    lat = x
                    lon = y
                    is_geographical = True
                
                drawing_command = DrawingCommand(
                    x=x,
                    y=y,
                    lat=lat,
                    lon=lon,
                    is_geographical=is_geographical,
                    action=data.get("action", data.get("event_type", "draw")),
                    color=data.get("color", "#000000"),
                    size=data.get("size", data.get("brush_size", 5)),
                    tool=data.get("tool", "brush"),
                    timestamp=datetime.now().isoformat()
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await db.save_drawing_command(room_id, drawing_command)
                
                # –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
                await manager.broadcast_to_room(room_id, {
                    "type": "drawing",
                    "data": drawing_command.dict()
                }, exclude=websocket)
            
            elif message.get("type") == "clear":
                # –û—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞
                await db.clear_room_drawings(room_id)
                await manager.broadcast_to_room(room_id, {
                    "type": "clear",
                    "timestamp": datetime.now().isoformat()
                })
            
            elif message.get("type") == "template":
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
                template_data = message.get("data")
                await db.save_template(room_id, template_data)
                await manager.broadcast_to_room(room_id, {
                    "type": "template",
                    "data": template_data,
                    "timestamp": datetime.now().isoformat()
                })
                
    except WebSocketDisconnect:
        await manager.disconnect(websocket, room_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ WebSocket: {e}")
        await manager.disconnect(websocket, room_id)

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
