"""
–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Drawing Sync Server —Å Kivy –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
"""
import asyncio
import websockets
import json
import requests
import threading
from datetime import datetime

class DrawingSyncClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"""
    
    def __init__(self, server_url="ws://localhost:8000", room_id="default"):
        self.server_url = server_url
        self.room_id = room_id
        self.websocket = None
        self.connected = False
        self.callbacks = {
            'on_drawing': None,
            'on_clear': None,
            'on_template': None,
            'on_user_joined': None,
            'on_user_left': None
        }
        
    def set_callback(self, event_type, callback_function):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        if event_type in self.callbacks:
            self.callbacks[event_type] = callback_function
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            uri = f"{self.server_url}/ws/{self.room_id}"
            self.websocket = await websockets.connect(uri)
            self.connected = True
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ: {self.room_id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            await self._message_handler()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.connected = False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.websocket:
            await self.websocket.close()
            self.connected = False
            print("‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
    
    async def send_drawing_command(self, x, y, action="draw", color="#000000", size=5, tool="brush"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è"""
        if not self.connected:
            return False
            
        command = {
            "type": "drawing",
            "x": x,
            "y": y,
            "action": action,
            "color": color,
            "size": size,
            "tool": tool
        }
        
        try:
            await self.websocket.send(json.dumps(command))
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return False
    
    async def clear_canvas(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞"""
        if not self.connected:
            return False
            
        try:
            await self.websocket.send(json.dumps({"type": "clear"}))
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            return False
    
    async def send_template(self, template_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞"""
        if not self.connected:
            return False
            
        try:
            await self.websocket.send(json.dumps({
                "type": "template",
                "data": template_data
            }))
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
            return False
    
    async def _message_handler(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            async for message in self.websocket:
                data = json.loads(message)
                await self._handle_message(data)
        except websockets.exceptions.ConnectionClosed:
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            self.connected = False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_type = data.get("type")
        
        if message_type == "drawing" and self.callbacks['on_drawing']:
            drawing_data = data.get("data", {})
            self.callbacks['on_drawing'](drawing_data)
            
        elif message_type == "clear" and self.callbacks['on_clear']:
            self.callbacks['on_clear']()
            
        elif message_type == "template" and self.callbacks['on_template']:
            template_data = data.get("data", {})
            self.callbacks['on_template'](template_data)
            
        elif message_type == "user_joined" and self.callbacks['on_user_joined']:
            self.callbacks['on_user_joined'](data)
            
        elif message_type == "user_left" and self.callbacks['on_user_left']:
            self.callbacks['on_user_left'](data)
    
    def run_in_thread(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def run_client():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self.connect())
        
        thread = threading.Thread(target=run_client, daemon=True)
        thread.start()
        return thread

class UpdateChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, server_url="http://localhost:8000", platform="android"):
        self.server_url = server_url
        self.platform = platform
    
    def check_for_updates(self, current_version="1.0.0"):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            url = f"{self.server_url}/api/updates/check/{self.platform}"
            params = {"current_version": current_version}
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return None
    
    def download_update(self, save_path="update_file"):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            url = f"{self.server_url}/api/updates/download/{self.platform}"
            
            response = requests.get(url, timeout=30, stream=True)
            
            if response.status_code == 200:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                extension = ".apk" if self.platform == "android" else ".exe" if self.platform == "windows" else ".AppImage"
                full_path = f"{save_path}{extension}"
                
                with open(full_path, "wb") as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        f.write(chunk)
                
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ: {full_path}")
                return full_path
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Kivy –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
class KivyDrawingApp:
    """–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Kivy –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
    
    def __init__(self):
        self.sync_client = DrawingSyncClient(room_id="my_room")
        self.update_checker = UpdateChecker(platform="android")  # –∏–ª–∏ "windows", "linux"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callbacks
        self.sync_client.set_callback('on_drawing', self.on_remote_drawing)
        self.sync_client.set_callback('on_clear', self.on_remote_clear)
        self.sync_client.set_callback('on_template', self.on_remote_template)
        self.sync_client.set_callback('on_user_joined', self.on_user_joined)
        self.sync_client.set_callback('on_user_left', self.on_user_left)
    
    def start_sync(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.sync_client.run_in_thread()
    
    def on_remote_drawing(self, drawing_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"üé® –†–∏—Å–æ–≤–∞–Ω–∏–µ: {drawing_data}")
        # –¢—É—Ç –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∫ —Ö–æ–ª—Å—Ç—É Kivy
        # self.canvas.apply_drawing_command(drawing_data)
    
    def on_remote_clear(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ö–æ–ª—Å—Ç–∞"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞")
        # self.canvas.clear()
    
    def on_remote_template(self, template_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
        print(f"üìÑ –®–∞–±–ª–æ–Ω: {template_data}")
        # self.canvas.add_template(template_data)
    
    def on_user_joined(self, user_data):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è"""
        print(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {user_data}")
    
    def on_user_left(self, user_data):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É"""
        print(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—à–µ–ª: {user_data}")
    
    def send_drawing(self, x, y, action="draw", color="#000000", size=5, tool="brush"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è"""
        # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        asyncio.create_task(
            self.sync_client.send_drawing_command(x, y, action, color, size, tool)
        )
    
    def clear_canvas(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞"""
        asyncio.create_task(self.sync_client.clear_canvas())
    
    def check_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        current_version = "1.0.0"  # –í–µ—Ä—Å–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        update_info = self.update_checker.check_for_updates(current_version)
        
        if update_info and update_info.get("has_update"):
            print(f"üîÑ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_info['latest_version']}")
            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {update_info['release_notes']}")
            
            if update_info.get("is_required"):
                print("‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!")
            
            # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            return update_info
        else:
            print("‚úÖ –£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è")
            return None

# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    app = KivyDrawingApp()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    app.check_updates()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    app.start_sync()
    
    # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    import time
    time.sleep(2)  # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    app.send_drawing(100, 200, "draw", "#FF0000", 5, "brush")
