#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
"""
import requests
import os
import argparse
from pathlib import Path

class AppUploader:
    def __init__(self, server_url="http://localhost:8000"):
        self.server_url = server_url
        
    def upload_version(self, platform, version, file_path, release_notes, is_required=False):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        valid_extensions = {
            "android": [".apk"],
            "windows": [".exe", ".msi"],
            "linux": [".AppImage", ".deb", ".rpm"]
        }
        
        file_extension = Path(file_path).suffix.lower()
        if file_extension not in valid_extensions.get(platform, []):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ {file_extension} –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã {platform}")
            return False
        
        print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ {platform} v{version}...")
        print(f"üìÅ –§–∞–π–ª: {file_path}")
        print(f"üìù –†–∞–∑–º–µ—Ä: {os.path.getsize(file_path) / 1024 / 1024:.1f} MB")
        
        url = f"{self.server_url}/api/updates/upload/{platform}"
        
        try:
            with open(file_path, 'rb') as f:
                files = {'file': f}
                data = {
                    'version': version,
                    'release_notes': release_notes,
                    'is_required': str(is_required).lower()
                }
                
                response = requests.post(url, files=files, data=data, timeout=300)
                
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
                print(f"üîó URL —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {result['download_url']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def check_latest_version(self, platform):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏"""
        try:
            url = f"{self.server_url}/api/updates/check/{platform}"
            response = requests.get(url, params={"current_version": "0.0.0"})
            
            if response.status_code == 200:
                data = response.json()
                if data.get("has_update"):
                    print(f"üì± –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è –¥–ª—è {platform}: {data['latest_version']}")
                    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['release_notes']}")
                else:
                    print(f"üì± –í–µ—Ä—Å–∏–∏ –¥–ª—è {platform} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    parser = argparse.ArgumentParser(description="–ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Ä—Å–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    parser.add_argument("action", choices=["upload", "check"], help="–î–µ–π—Å—Ç–≤–∏–µ")
    parser.add_argument("--platform", choices=["android", "windows", "linux"], help="–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞")
    parser.add_argument("--version", help="–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0.0)")
    parser.add_argument("--file", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    parser.add_argument("--notes", help="–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    parser.add_argument("--required", action="store_true", help="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    parser.add_argument("--server", default="http://localhost:8000", help="URL —Å–µ—Ä–≤–µ—Ä–∞")
    
    args = parser.parse_args()
    
    uploader = AppUploader(args.server)
    
    if args.action == "upload":
        if not all([args.platform, args.version, args.file, args.notes]):
            print("‚ùå –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω—É–∂–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: --platform, --version, --file, --notes")
            return
            
        uploader.upload_version(
            args.platform, 
            args.version, 
            args.file, 
            args.notes, 
            args.required
        )
        
    elif args.action == "check":
        if args.platform:
            uploader.check_latest_version(args.platform)
        else:
            for platform in ["android", "windows", "linux"]:
                uploader.check_latest_version(platform)
                print()

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    print("üì± App Version Uploader")
    print()
    print("–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("python upload_app.py upload --platform android --version 1.0.0 --file app.apk --notes '–ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑'")
    print("python upload_app.py check --platform android")
    print("python upload_app.py check  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
    print()
    
    main()
