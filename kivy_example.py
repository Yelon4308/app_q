"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Drawing Sync —Å Kivy –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
–ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ–¥ –≤–∞—à–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
"""
from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
from kivy.uix.label import Label
from kivy.graphics import Line, Color, Ellipse
from kivy.clock import Clock
import asyncio
import websockets
import json
import threading
from datetime import datetime

class DrawingSyncWidget(Widget):
    """–í–∏–¥–∂–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.server_url = "ws://localhost:8000"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
        self.room_id = "kivy_room"
        self.websocket = None
        self.is_connected = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        self.current_line = None
        self.is_drawing = False
        self.current_color = [1, 0, 0, 1]  # –ö—Ä–∞—Å–Ω—ã–π
        self.line_width = 3
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.bind(on_touch_down=self.on_touch_down)
        self.bind(on_touch_move=self.on_touch_move)
        self.bind(on_touch_up=self.on_touch_up)
    
    def connect_to_server(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def run_websocket():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self._websocket_client())
        
        thread = threading.Thread(target=run_websocket, daemon=True)
        thread.start()
    
    async def _websocket_client(self):
        """WebSocket –∫–ª–∏–µ–Ω—Ç"""
        try:
            uri = f"{self.server_url}/ws/{self.room_id}"
            print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {uri}")
            
            async with websockets.connect(uri) as websocket:
                self.websocket = websocket
                self.is_connected = True
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ {self.room_id}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in websocket:
                    data = json.loads(message)
                    self._handle_server_message(data)
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.is_connected = False
    
    def _handle_server_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if data.get("type") == "drawing":
            drawing_data = data.get("data", {})
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Kivy
            Clock.schedule_once(lambda dt: self._apply_remote_drawing(drawing_data), 0)
        
        elif data.get("type") == "clear":
            Clock.schedule_once(lambda dt: self._clear_canvas(), 0)
        
        elif data.get("type") == "user_joined":
            print(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –í—Å–µ–≥–æ: {data.get('total_users', 0)}")
        
        elif data.get("type") == "user_left":
            print(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—à–µ–ª. –í—Å–µ–≥–æ: {data.get('total_users', 0)}")
    
    def _apply_remote_drawing(self, drawing_data):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        x = drawing_data.get("x", 0)
        y = drawing_data.get("y", 0)
        action = drawing_data.get("action", "draw")
        color_hex = drawing_data.get("color", "#FF0000")
        size = drawing_data.get("size", 3)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HEX –≤ RGB –¥–ª—è Kivy
        color_rgb = self._hex_to_rgb(color_hex)
        
        with self.canvas:
            if action == "down":
                Color(*color_rgb)
                self.remote_line = Line(points=[x, y], width=size)
            elif action == "draw" and hasattr(self, 'remote_line'):
                self.remote_line.points += [x, y]
            elif action == "up":
                self.remote_line = None
    
    def _clear_canvas(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞"""
        self.canvas.clear()
    
    def _hex_to_rgb(self, hex_color):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HEX –≤ RGB –¥–ª—è Kivy"""
        hex_color = hex_color.lstrip('#')
        return [int(hex_color[i:i+2], 16)/255.0 for i in (0, 2, 4)] + [1.0]
    
    def _rgb_to_hex(self, rgb_color):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RGB –≤ HEX"""
        return "#{:02x}{:02x}{:02x}".format(
            int(rgb_color[0] * 255),
            int(rgb_color[1] * 255),
            int(rgb_color[2] * 255)
        )
    
    def send_drawing_command(self, x, y, action):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        if not self.is_connected or not self.websocket:
            return
        
        command = {
            "type": "drawing",
            "x": x,
            "y": y,
            "action": action,
            "color": self._rgb_to_hex(self.current_color),
            "size": self.line_width,
            "tool": "brush"
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        def send_async():
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.websocket.send(json.dumps(command)))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        
        threading.Thread(target=send_async, daemon=True).start()
    
    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            self.is_drawing = True
            
            # –†–∏—Å—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            with self.canvas:
                Color(*self.current_color)
                self.current_line = Line(points=[touch.x, touch.y], width=self.line_width)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            self.send_drawing_command(touch.x, touch.y, "down")
            return True
        return False
    
    def on_touch_move(self, touch):
        if self.is_drawing and self.collide_point(*touch.pos):
            if self.current_line:
                self.current_line.points += [touch.x, touch.y]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            self.send_drawing_command(touch.x, touch.y, "draw")
            return True
        return False
    
    def on_touch_up(self, touch):
        if self.is_drawing:
            self.is_drawing = False
            self.current_line = None
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            self.send_drawing_command(touch.x, touch.y, "up")
            return True
        return False
    
    def clear_canvas(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        self.canvas.clear()
        
        if self.is_connected and self.websocket:
            def send_clear():
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(self.websocket.send(json.dumps({"type": "clear"})))
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            
            threading.Thread(target=send_clear, daemon=True).start()
    
    def change_color(self, color):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∫–∏—Å—Ç–∏"""
        self.current_color = color
    
    def change_size(self, size):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∏—Å—Ç–∏"""
        self.line_width = size

class DrawingSyncApp(App):
    """–ü—Ä–∏–º–µ—Ä Kivy –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π"""
    
    def build(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        root = BoxLayout(orientation='vertical')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_layout = BoxLayout(size_hint=(1, 0.1), orientation='horizontal')
        
        room_input = TextInput(
            text='kivy_room',
            size_hint=(0.3, 1),
            multiline=False
        )
        
        connect_btn = Button(
            text='–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è',
            size_hint=(0.2, 1)
        )
        
        status_label = Label(
            text='–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω',
            size_hint=(0.5, 1)
        )
        
        info_layout.add_widget(Label(text='–ö–æ–º–Ω–∞—Ç–∞:', size_hint=(0.1, 1)))
        info_layout.add_widget(room_input)
        info_layout.add_widget(connect_btn)
        info_layout.add_widget(status_label)
        
        # –í–∏–¥–∂–µ—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        drawing_widget = DrawingSyncWidget(size_hint=(1, 0.8))
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls = BoxLayout(size_hint=(1, 0.1), orientation='horizontal')
        
        # –ö–Ω–æ–ø–∫–∏ —Ü–≤–µ—Ç–æ–≤
        red_btn = Button(text='üî¥', size_hint=(0.1, 1))
        green_btn = Button(text='üü¢', size_hint=(0.1, 1))
        blue_btn = Button(text='üîµ', size_hint=(0.1, 1))
        black_btn = Button(text='‚ö´', size_hint=(0.1, 1))
        
        # –ö–Ω–æ–ø–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
        small_btn = Button(text='‚ó¶', size_hint=(0.1, 1))
        medium_btn = Button(text='‚óè', size_hint=(0.1, 1))
        large_btn = Button(text='‚¨§', size_hint=(0.1, 1))
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        clear_btn = Button(text='–û—á–∏—Å—Ç–∏—Ç—å', size_hint=(0.2, 1))
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        def connect_to_room(instance):
            drawing_widget.room_id = room_input.text
            drawing_widget.connect_to_server()
            status_label.text = f'–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {room_input.text}...'
        
        connect_btn.bind(on_press=connect_to_room)
        
        red_btn.bind(on_press=lambda x: drawing_widget.change_color([1, 0, 0, 1]))
        green_btn.bind(on_press=lambda x: drawing_widget.change_color([0, 1, 0, 1]))
        blue_btn.bind(on_press=lambda x: drawing_widget.change_color([0, 0, 1, 1]))
        black_btn.bind(on_press=lambda x: drawing_widget.change_color([0, 0, 0, 1]))
        
        small_btn.bind(on_press=lambda x: drawing_widget.change_size(2))
        medium_btn.bind(on_press=lambda x: drawing_widget.change_size(5))
        large_btn.bind(on_press=lambda x: drawing_widget.change_size(10))
        
        clear_btn.bind(on_press=lambda x: drawing_widget.clear_canvas())
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        controls.add_widget(red_btn)
        controls.add_widget(green_btn)
        controls.add_widget(blue_btn)
        controls.add_widget(black_btn)
        controls.add_widget(Label(text='|', size_hint=(0.05, 1)))
        controls.add_widget(small_btn)
        controls.add_widget(medium_btn)
        controls.add_widget(large_btn)
        controls.add_widget(Label(text='|', size_hint=(0.05, 1)))
        controls.add_widget(clear_btn)
        
        root.add_widget(info_layout)
        root.add_widget(drawing_widget)
        root.add_widget(controls)
        
        # –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        Clock.schedule_once(lambda dt: connect_to_room(None), 1)
        
        return root

if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
    # pip install kivy websockets
    
    DrawingSyncApp().run()
