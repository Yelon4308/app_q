import sqlite3
import asyncio
import os
from database import init_db

async def main():
    """–ó–∞–ø—É—Å–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print("üîÑ –ó–∞–ø—É—Å–∫–∞—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    db_exists = os.path.exists("drawing_sync.db")
    
    if db_exists:
        print("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≤–∂–µ —ñ—Å–Ω—É—î")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
        print("üì¶ –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        if os.path.exists("drawing_sync.db.bak"):
            os.remove("drawing_sync.db.bak")
        os.rename("drawing_sync.db", "drawing_sync.db.bak")
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: drawing_sync.db.bak")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö (—Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ)
    await init_db()
    
    if db_exists:
        print("üîÑ –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó...")
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞—Ä–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤ –Ω–æ–≤—É
        try:
            # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ –Ω–æ–≤–æ—ó —ñ —Å—Ç–∞—Ä–æ—ó –ë–î
            conn_new = sqlite3.connect("drawing_sync.db")
            conn_old = sqlite3.connect("drawing_sync.db.bak")
            
            # –ö–æ–ø—ñ—é—î–º–æ –¥–∞–Ω—ñ –∑ —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—å
            tables = [
                "drawing_commands", 
                "rooms", 
                "templates", 
                "app_versions"
            ]
            
            for table in tables:
                try:
                    print(f"üîÑ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—ñ {table}...")
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
                    cursor_old = conn_old.execute(f"PRAGMA table_info({table})")
                    columns = [column[1] for column in cursor_old.fetchall()]
                    
                    if not columns:
                        print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è {table} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ä—ñ–π –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                        continue
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
                    cursor_old = conn_old.execute(f"SELECT * FROM {table}")
                    rows = cursor_old.fetchall()
                    
                    if not rows:
                        print(f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—è {table} –ø–æ—Ä–æ–∂–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                        continue
                    
                    # –í—Å—Ç–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –≤ –Ω–æ–≤—É —Ç–∞–±–ª–∏—Ü—é
                    placeholders = ', '.join(['?' for _ in columns])
                    columns_str = ', '.join(columns)
                    
                    for row in rows:
                        conn_new.execute(
                            f"INSERT INTO {table} ({columns_str}) VALUES ({placeholders})",
                            row
                        )
                    
                    conn_new.commit()
                    print(f"‚úÖ –î–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ {table} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ñ: {len(rows)} –∑–∞–ø–∏—Å—ñ–≤")
                    
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å—É —Ç–∞–±–ª–∏—Ü—ñ {table}: {e}")
            
            conn_new.close()
            conn_old.close()
            print("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")
    
    print("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main())
