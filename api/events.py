from fastapi import APIRouter, HTTPException, Depends
from typing import List, Dict, Any
import json
from datetime import datetime

from database import Database
from models.drawing_event import DrawingEvent
from websocket_handler import ConnectionManager

router = APIRouter()
db = Database()

# –¢—É—Ç –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –∑'—î–¥–Ω–∞–Ω—å –∑ main.py
manager: ConnectionManager = None

def set_connection_manager(connection_manager: ConnectionManager):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑'—î–¥–Ω–∞–Ω—å"""
    global manager
    manager = connection_manager

@router.post("/{room_id}")
async def create_drawing_event(room_id: str, event: DrawingEvent):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–æ–¥—ñ—ó –º–∞–ª—é–≤–∞–Ω–Ω—è"""
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–¥—ñ—é –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    result = await db.save_drawing_event(room_id, event)
    
    if not result:
        raise HTTPException(status_code=409, detail=f"–ü–æ–¥—ñ—è –∑ ID {event.event_id} –≤–∂–µ —ñ—Å–Ω—É—î")
    
    # –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
    print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –ø–æ–¥—ñ—é –º–∞–ª—é–≤–∞–Ω–Ω—è: {event.event_id}")
    print(f"üìä –¢–∏–ø: {event.drawing_type}, –¥—ñ—è: {event.action}, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {event.platform}")
    print(f"üåê –î–∞–Ω—ñ: {event.data}")
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º –∫—ñ–º–Ω–∞—Ç–∏ —á–µ—Ä–µ–∑ WebSocket
    if manager:
        message = {
            "type": "drawing_event",
            "event_id": event.event_id,
            "event_name": event.event_name,
            "drawing_type": event.drawing_type,
            "action": event.action,
            "platform": event.platform,
            "timestamp": event.timestamp.isoformat(),
            "style": event.style.dict(),
            "data": event.data if isinstance(event.data, dict) else event.data.dict()
        }
        
        print(f"üì° –¢—Ä–∞–Ω—Å–ª—é—î–º–æ –ø–æ–¥—ñ—é: {event.event_id}")
        await manager.broadcast_to_room(room_id, message)
    
    return {
        "success": True,
        "message": f"–ü–æ–¥—ñ—è –º–∞–ª—é–≤–∞–Ω–Ω—è {event.event_id} —Å—Ç–≤–æ—Ä–µ–Ω–∞",
        "event_id": event.event_id
    }

@router.get("/{room_id}")
async def get_room_events(room_id: str):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–¥—ñ–π –º–∞–ª—é–≤–∞–Ω–Ω—è –≤ –∫—ñ–º–Ω–∞—Ç—ñ"""
    events = await db.get_room_events(room_id)
    
    return {
        "room_id": room_id,
        "events": events,
        "count": len(events)
    }

@router.get("/{room_id}/{event_id}")
async def get_event(room_id: str, event_id: str):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–æ–¥—ñ—ó –∑–∞ ID"""
    event = await db.get_event(event_id)
    
    if not event:
        raise HTTPException(status_code=404, detail=f"–ü–æ–¥—ñ—è –∑ ID {event_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
    
    if event["room_id"] != room_id:
        raise HTTPException(status_code=403, detail="–ü–æ–¥—ñ—è –Ω–∞–ª–µ–∂–∏—Ç—å —ñ–Ω—à—ñ–π –∫—ñ–º–Ω–∞—Ç—ñ")
    
    return event

@router.delete("/{room_id}/{event_id}")
async def delete_event(room_id: str, event_id: str):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–¥—ñ—ó –º–∞–ª—é–≤–∞–Ω–Ω—è"""
    event = await db.get_event(event_id)
    
    if not event:
        raise HTTPException(status_code=404, detail=f"–ü–æ–¥—ñ—è –∑ ID {event_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
    
    if event["room_id"] != room_id:
        raise HTTPException(status_code=403, detail="–ü–æ–¥—ñ—è –Ω–∞–ª–µ–∂–∏—Ç—å —ñ–Ω—à—ñ–π –∫—ñ–º–Ω–∞—Ç—ñ")
    
    result = await db.delete_event(event_id)
    
    if not result:
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–¥—ñ—ó")
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º –∫—ñ–º–Ω–∞—Ç–∏ –ø—Ä–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    if manager:
        await manager.broadcast_to_room(room_id, {
            "type": "drawing_event_deleted",
            "event_id": event_id
        })
    
    return {
        "success": True,
        "message": f"–ü–æ–¥—ñ—è {event_id} –≤–∏–¥–∞–ª–µ–Ω–∞"
    }

@router.delete("/{room_id}")
async def clear_room_events(room_id: str):
    """–û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–¥—ñ–π –º–∞–ª—é–≤–∞–Ω–Ω—è –≤ –∫—ñ–º–Ω–∞—Ç—ñ"""
    await db.clear_room_events(room_id)
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º –∫—ñ–º–Ω–∞—Ç–∏
    if manager:
        await manager.broadcast_to_room(room_id, {
            "type": "clear_events",
            "timestamp": datetime.now().isoformat(),
            "source": "api"
        })
    
    return {
        "success": True,
        "message": f"–í—Å—ñ –ø–æ–¥—ñ—ó –º–∞–ª—é–≤–∞–Ω–Ω—è –≤ –∫—ñ–º–Ω–∞—Ç—ñ {room_id} –≤–∏–¥–∞–ª–µ–Ω—ñ"
    }
